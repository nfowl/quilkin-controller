# Default values for quilkin-controller.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
## Provide a name in place of quilkin-controller for `app:` labels
##
nameOverride: ""
fullnameOverride: ""

## Override the deployment namespace
##
namespaceOverride: ""
imagePullSecrets: []


controller:
  replicaCount: 1

  image:
    repository: ghcr.io/nfowl/quilkin-controller
    tag: "v0.1.0"
    pullPolicy: IfNotPresent

  # The Quilkin image to inject into sender pods
  proxyImage: us-docker.pkg.dev/quilkin/release/quilkin:0.1.0

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    webhookPort: 80
    metricsPort: 8080
    xdsPort: 18000

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  serviceMonitor:
    enabled: false

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

admissionWebhooks:
  failurePolicy: Ignore
  enabled: true
  ## A PEM encoded CA bundle which will be used to validate the webhook's server certificate.
  ## If unspecified, system trust roots on the apiserver are used.
  caBundle: ""
  ## If enabled, generate a self-signed certificate, then patch the webhook configurations with the generated data.
  ## On chart upgrades (or if the secret exists) the cert will not be re-generated. You can use this to provide your own
  ## certs ahead of time if you wish.
  ##
  patch:
    enabled: true
    image:
      repository: k8s.gcr.io/ingress-nginx/kube-webhook-certgen
      tag: v1.0
      sha: "f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068"
      pullPolicy: IfNotPresent
    resources: {}
    ## Provide a priority class name to the webhook patching job
    ##
    priorityClassName: ""
    podAnnotations: {}
    nodeSelector: {}
    affinity: {}
    tolerations: []

    ## SecurityContext holds pod-level security attributes and common container settings.
    ## This defaults to non root user with uid 2000 and gid 2000. *v1.PodSecurityContext  false
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    ##
    securityContext:
      runAsGroup: 2000
      runAsNonRoot: true
      runAsUser: 2000

  # Use certmanager to generate webhook certs
  certManager:
    enabled: false
    # issuerRef:
    #   name: "issuer"
    #   kind: "ClusterIssuer"